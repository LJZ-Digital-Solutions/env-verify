name: Release Build

on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get release info
        id: get_release
        run: |
          echo "upload_url=${{ github.event.release.upload_url }}" >> $GITHUB_OUTPUT

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.target }}-release

      - name: Install system dependencies
        run: |
          sudo apt-get update
          case ${{ matrix.target }} in
            x86_64-unknown-linux-musl)
              sudo apt-get install -y musl-tools pkg-config libssl-dev
              ;;
            aarch64-unknown-linux-gnu)
              sudo apt-get install -y gcc-aarch64-linux-gnu pkg-config libssl-dev
              ;;
            x86_64-pc-windows-gnu)
              sudo apt-get install -y gcc-mingw-w64-x86-64 pkg-config libssl-dev
              ;;
            x86_64-apple-darwin | aarch64-apple-darwin)
              # macOS targets require special setup, will use cross-compilation
              sudo apt-get install -y pkg-config libssl-dev
              ;;
            *)
              sudo apt-get install -y pkg-config libssl-dev
              ;;
          esac

      - name: Build release binary
        run: |
          case ${{ matrix.target }} in
            aarch64-unknown-linux-gnu)
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
              ;;
            x86_64-pc-windows-gnu)
              export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc
              ;;
            x86_64-unknown-linux-musl)
              export CC=musl-gcc
              ;;
          esac
          
          cargo build --release --target ${{ matrix.target }}

      - name: Create release archive
        run: |
          binary_name="env-verify"
          target="${{ matrix.target }}"
          archive_name="${binary_name}-${target}"
          
          mkdir -p "dist/${archive_name}"
          
          # Copy binary (handle Windows .exe extension)
          if [[ "$target" == *"windows"* ]]; then
            cp "target/${target}/release/${binary_name}.exe" "dist/${archive_name}/"
          else
            cp "target/${target}/release/${binary_name}" "dist/${archive_name}/"
          fi
          
          # Copy additional files if they exist
          cp README.md "dist/${archive_name}/" 2>/dev/null || echo "README.md not found, skipping"
          cp LICENSE* "dist/${archive_name}/" 2>/dev/null || echo "LICENSE not found, skipping"
          
          cd dist
          zip -r "${archive_name}.zip" "${archive_name}"
          echo "ARCHIVE_NAME=${archive_name}.zip" >> $GITHUB_ENV

      - name: Upload Release Asset
        if: github.event_name == 'release'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: dist/${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/zip